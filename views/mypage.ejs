<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>mypage</title>
    <link rel="stylesheet" href="/public/css/mypage.css" />
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <h1>mypage</h1>
    <form name="userProfile " class="section mypage">
      <section class="q">
        회원정보
        <fieldset class="profileBox">
          <legend>
            이메일
            <input type="text" name="email" value="<%=user.email%>" readonly />
          </legend>
          <legend>
            닉네임
            <input
              type="text"
              name="nickName"
              value="<%=user.nickname%>"
              readonly
              required
            />
          </legend>
          <legend>
            비밀번호
            <input
              type="text"
              name="password"
              value="<%=user.password%>"
              readonly
              required
            />
          </legend>
        </fieldset>

        <div class="btn">
          <button type="button" onclick="profileEdit();">Edit</button>
        </div>
        <div class="logout-btn">
          <button type="button" onclick="handleLogout()">로그아웃</button>
        </div>
      </section>

      <br />
      <div class="profile-delete">
        <button type="button" onclick="userDelete()">회원 탈퇴</button>
      </div>
    </form>

    <section class="q section buy hide">구매내역</section>
    <section class="q section sell hide">판매 내역</section>

    <button onclick="changeSection(this)" class="sell-btn">
      판매페이지 확인
    </button>
    <button onclick="changeSection(this)" class="buy-btn">
      구매페이지 확인
    </button>
    <button onclick="changeSection(this)" class="my-btn">마이페이지</button>
    <script>
      //회원 정보 수정
      function profileEdit() {
        const form = document.forms['userProfile'];
        const btnBox = document.querySelector('.btn');
        const editName = form.nickName;
        const editPassword = form.password;

        editName.removeAttribute('readonly');
        editName.setAttribute('placeholder', form.nickName.value);

        editName.value = '';

        editPassword.removeAttribute('readonly');
        // editPassword.setAttribute('placeholder', form.password.value);
        editPassword.value = '';

        const editBtn = `
           <button type="button" onclick="editDo()">수정완료</button>
            <button type="button" onclick="editCancel()">리셋</button>`;
        btnBox.innerHTML = editBtn;
      }

      //회원 정보 수정완료
      async function editDo() {
        const form = document.forms['userProfile'];

        try {
          const response = await axios({
            method: 'put',
            url: '/user',
            data: {
              nickName: form.nickName.value,
              password: form.password.value,
            },
          });
          if (
            !form.nickName.checkValidity() ||
            !form.password.checkValidity()
          ) {
            alert('빈칸을 입력해주세요');
            return;
          }
        } catch (err) {
          console.error(err);
        }

        const btnBox = document.querySelector('.btn');
        const editName = form.nickName;
        const editPassword = form.password;
        const editBtnsBox = form.editBtns;
        // console.log(editName.value);

        editName.setAttribute('readonly', '');
        editName.removeAttribute('placeholder');

        editPassword.setAttribute('readonly', '');
        // editPassword.removeAttribute('placeholder');

        const editBtn = `
          <button type="button" onclick="profileEdit();">Edit</button>
        `;
        btnBox.innerHTML = editBtn;
      }

      //정보 수정칸 리셋
      function editCancel() {
        const form = document.forms['userProfile'];
        form.reset();
      }

      // 로그 아웃
      async function handleLogout() {
        try {
          const response = await axios({
            method: 'get',
            url: '/auth/logout',
          });
          console.log(response.data);
          alert(' 로그아웃 성공');
        } catch (err) {
          console.error(error);
        }
      }

      //회원 탈퇴
      async function userDelete() {
        const form = document.forms['userProfile'];
        const email = form.email.value;
        try {
          const response = await axios({
            method: 'delete',
            url: '/delete',
          });
          alert(' 탈퇴 성공');
        } catch (err) {
          console.error(err);
        }
      }

      function changeSection(btn) {
        const mypageSection = document.querySelector('.mypage');
        const sellSection = document.querySelector('.sell');
        const buySection = document.querySelector('.buy');
        console.log(mypageSection);
        console.log(sellSection);
        console.log(buySection);
        if (btn.classList.contains('sell-btn')) {
          sellSection.classList.remove('hide');
          mypageSection.classList.add('hide');
          buySection.classList.add('hide');
        } else if (btn.classList.contains('buy-btn')) {
          sellSection.classList.add('hide');
          mypageSection.classList.add('hide');
          buySection.classList.remove('hide');
        } else if (btn.classList.contains('my-btn')) {
          sellSection.classList.add('hide');
          mypageSection.classList.remove('hide');
          buySection.classList.add('hide');
        }
      }
    </script>
  </body>
</html>
