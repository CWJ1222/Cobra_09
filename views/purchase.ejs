<head>
  <%- include('include/head') %>
  <title><%#= title %></title>
  <!-- (todo)public/css 분리 예정 -->
  <style>
    /* 상품 카테고리 필터 */
    .categoryFilter {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin: 30px 0;
    }

    .filterBtn {
      display: flex;
      flex-direction: column;
      align-items: center;
      background: none;
      border: none;
      cursor: pointer;
      transition: transform 0.3s ease, color 0.3s;
    }

    .filterBtn img {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
      margin-bottom: 10px;
      transition: transform 0.3s;
    }

    .filterBtn.clotehs img {
      background-color: lightblue;
      border-radius: 50%;
      padding: 5px;
    }

    .filterBtn.books img {
      background-color: #ededed;
      border-radius: 50%;
      padding: 5px;
    }

    .filterBtn span {
      font-size: 14px;
      color: var(--color-text);
    }

    .filterBtn.active img {
      /* border: 2px solid var(--color-primary); */
      transform: scale(1.1);
    }

    .filterBtn.active span {
      font-weight: bold;
      color: var(--color-primary);
    }

    .filterBtn:hover img {
      transform: scale(1.1);
    }
    /* 상품 목록 */
    .productGrid {
      display: flex;
      grid-template-columns: repeat(4, 1fr);
      gap: 20px;
      padding: 30px;
      flex-wrap: wrap;
      margin: 0 30px;
    }
    .productCard {
      background-color: var(--color-white);
      border-radius: 9px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      position: relative;
      text-align: center;
      padding: 20px;
    }
    .productCard img {
      width: 200px;
      height: 200px;
      object-fit: cover;
      margin-bottom: 20px;
      border-radius: 9px;
    }

    .productDetails {
      padding: 15px;
      display: flex;
      justify-content: flex-start;
      flex-direction: column;
    }

    .productName {
      font-size: 18px;
      margin: 10px 0;
      color: var(--color-text);
    }

    .productPrice {
      font-size: 16px;
      font-weight: bold;
      color: var(--color-text);
      margin: 10px 0;
    }

    /* 좋아요 */
  </style>
</head>
<body>
  <%- include('include/header') %>
  <br />
  <main class="max-container">
    <!-- 카테고리 필터 -->
    <!-- 식품/ 전자기기/의류 -->
    <ul class="categoryFilter">
      <li>
        <button class="filterBtn active" data-category="all">
          <img src="/public/img/filter-all.png" alt="전체" />
          <span>전체</span>
        </button>
      </li>
      <li>
        <button class="filterBtn" data-category="1">
          <img src="/public/img/filter-electronics.png" alt="전자기기" />
          <span>전자기기</span>
        </button>
      </li>
      <li>
        <button class="filterBtn clothes" data-category="2">
          <img src="/public/img/filter-clothes.png" alt="의류" />
          <span>의류</span>
        </button>
      </li>
      <!-- (todo) 필터 버튼 이미지 교체하기 -->
      <li>
        <button class="filterBtn books" data-category="3">
          <img src="/public/img/filter-books.png" alt="식품" />
          <span>도서</span>
        </button>
      </li>
    </ul>

    <!-- 상품 목록 -->
    <div class="productGrid max-container"></div>
  </main>
</body>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const productGrid = document.querySelector('.productGrid');
    const filterButtons = document.querySelectorAll('.filterBtn');
    // const productCards = document.querySelectorAll('.productCard');

    // 상품 목록 업데이트 함수
    const updateProductGrid = (products) => {
      productGrid.innerHTML = '';

      // 상품 카드
      if (products.length > 0) {
        productGrid.forEach((product) => {
          const productCard = `
              <div class="productCard" data-category-id="${product.product_id}">
                <img src="/public/img/${product.image}" alt="${product.name}" />
                <div class="productDetails">
                  <div class="productName">${product.name}</div>
                  <div class="productPrice">${product.price} 원</div>
                </div>
              </div>`;
          productGrid.innerHTML += productCard;
        });
      } else {
        productGrid.innerHTML = `<p>등록된 상품이 없습니다.</p>`;
      }
    };

    // GET /products : 전체 상품 가져오기
    const getAllProducts = async () => {
      try {
        const res = await axios.get('/products');
        console.log('전체 상품:', res.data);
        updateProductGrid(res.data);
      } catch (err) {
        console.error('전체 상품 가져오기 오류:', err);
      }
    };

    // GET /product/:id : 특정 카테고리 상품 가져오기
    const getItemsByCategory = async (categoryId) => {
      try {
        const res = await axios.get(`/products/${categoryId}`);
        console.log(`카테고리 ${categoryId} 상품: `, res.data);
        updateProductGrid(res.data);
      } catch (err) {
        console.error(`카테고리 ${categoryId} 상품 가져오기 오류: `, err);
      }
    };

    // 구매 페이지 초기 진입 시 전체 상품 보여주기
    getAllProducts();

    // 상품 카테고리 필터링
    filterButtons.forEach((button) => {
      button.addEventListener('click', () => {
        // (!) 필터링 버튼 활성화 시 스타일 변경
        filterButtons.forEach((btn) => btn.classList.remove('active'));
        button.classList.add('active');

        // 상품 카테고리 ID 가져오기
        const categoryId = button.dataset.category;

        // 카테고리에 따라 상품들 가져오기
        if (categoryId === 'all') {
          getAllProducts();
        } else {
          getItemsByCategory(categoryId);
        }
      });
    });

    // --------- (수정 전) 상품 필터링 버튼 ----------------
    // filterButtons.forEach((button) => {
    //   button.addEventListener('click', () => {
    //     filterButtons.forEach((btn) => btn.classList.remove('active'));
    //     button.classList.add('active');

    //     // 선택된 카테고리 가져오기
    //     const selectedCategory = button.dataset.category;

    //     // 상품 필터링
    //     productCards.forEach((card) => {
    //       const cardCategory = card.dataset.categoryId;
    //       if (selectedCategory === 'all' || cardCategory === selectedCategory) {
    //         card.style.display = 'block';
    //       } else {
    //         card.style.display = 'none';
    //       }
    //     });
    //   });
    // });
  });

  // (Todo) 좋아요 기능
</script>
