<!DOCTYPE html>
<html lang="ko">
  <head>
    <%-include('include/head')%>
    <title><%#= title %></title>
    <!-- (todo) 나중에 public/css 분리 예정 -->
    <style>
      main {
        display: flex;
        justify-content: center;
        flex-direction: column;
        align-items: center;
      }

      /* 로그인 카드 레이아웃 */
      .loginCard {
        width: 340px;
        padding: 50px 0;
        text-align: center;
      }

      .loginCard h1 {
        font-size: 28px;
        font-weight: bold;
        margin-bottom: 20px;
      }

      .loginCard p{
        margin-bottom: 20px;
      }

      .loginCard form input {
        width: 100%;
        padding: 8px;
        margin: 10px 0;
        
        border-radius: 6px;
        font-size: 14px;
      }

      /* 로그인 입력창 */
      .inputWrapper {
        position: relative;
      }

      .inputWrapper input {
        width: 100%;
        height: 50px;
        padding: 10px 40px 10px 10px;
        border: 1px solid var(--color-secondary);
        font-size: 16px;
        outline: none;
        transition: all 0.4s ease-in-out;
      }

      .inputWrapper label {
        position: absolute;
        top: 50%;
        left: 10px;
        transform: translateY(50%);
        color: transparent;
        font-size: 16px;
        pointer-events: none;
        transition: all 0.3s ease;
        pointer-events: none;
      }

      /* 로그인 입력창 활성화 상태 */
      .inputWrapper input:focus::placeholder{
        color: transparent;
      }
      .inputWrapper input:focus + label,
      .inputWrapper input:not(:placeholder-shown) + label {
        top: 5px; /* 입력창 좌측 상단으로 이동 */
        left: 10px;
        font-size: 12px;
        color: var(--color-text-sub);
      }

      /* 로그인 에러 메시지 */
      #error {
        display: none;
        background-color: #fafafa;
        padding: 20px;
        text-align: start;
        font-size: 14px;
        color: var(--color-error)
      }

      /* 비밀번호 보기 숨기기 */
      #toggleBtn{
        position: absolute;
        top: 40%;
        right: 10px;
        cursor: pointer;
        color: var(--color-secondary);
      }
      #toggleBtn::before{
        content: '\f070'; /* 눈 감김 */
        font-family: fontAwesome;
      }
      #toggleBtn.show::before{
        content: '\f06e'; /* 눈 뜸! */
        font-family: fontAwesome;
      }

      /* 로그인 버튼 */
      .loginBtn {
        width: 100%;
        padding: 12px;
        background-color: var(--color-primary-light);
        color: var(--color-primary);
        border: none;
        font-size: 14px;
        margin-bottom: 10px;
        transition: all 0.4s ease-in-out;
      }
      .loginBtn:hover{
        filter: brightness(0.9)
      }
      
      .loginBtn.email{
        margin-top: 20px;
      }
      /* OAuth 버튼 */
      .loginBtn.kakao{
        background-color: #ffe812;
        color: #3c1e1e;
        cursor: pointer;
        border-radius: 9px;
      }

      .loginBtn.naver {
        background-color: #1ec800;
        color: white;
      }

      /* 하단 링크 */
      .loginFooter {
        font-size: 14px;
        margin-top: 40px;
        color: var(--color-text);
        position: relative; 
      }

      .loginFooter::before{
        content: '';
        position: absolute;
        top: -20px;
        left: 0;;
        width: 100%;
        height: 1px;
        background-color: var(--color-secondary);
      }

      .loginFooter a {
        color: var(--color-text);
        text-decoration: none;
      }

      .loginFooter a:hover {
        text-decoration: underline;
      }
    </style>
  </head>
  <body>
    <!-- 헤더 -->
    <%- include('include/header') %>

    <!-- 본문 영역 (로그인) -->
    <main class="max-container">
      
      <!-- 로그인 카드 -->
      <div class="loginCard">
        <h1>로그인</h1>
        
        <!-- 로그인 폼 -->
        <form id="loginForm" name="loginForm">
          <div class="inputWrapper">

            <!-- url전달시키기 -->
            <input type="hidden" name="redirectUrl" value="<%= redirectUrl %>" />

            <input
            type="text"
            name="id"
            placeholder="이메일"
            aria-label="이메일"
            required />
            <label for="userId">이메일</label>
          </div>
          <div class="inputWrapper">
            <input
            type="password"
            id="password"
            name="pw"
            placeholder="비밀번호"
            aira-label="비밀번호"
            required/>
            <label for="password">비밀번호</label>
            <span id="toggleBtn"></span>
          </div>
          <div id="error" class="errorMsg"></div>
          <button type="button" class="loginBtn email" id="login-button">
            이메일로 로그인하기
          </button>
          
        </form>

        <!-- OAuth 로그인 버튼 -->
         <!-- (todo) 왼쪽에 아이콘 넣기 -->
        <div class="loginBtn kakao">
          <a href="/auth/kakao">
            카카오로 시작하기
          </a>
        </div>
        <!-- <button class="loginBtn naver">네이버로 시작하기</button> -->

         <!-- 하단 링크 -->
         <div class="loginFooter">
          <a href="/">아이디/비밀번호 찾기</a> |
          <a id="signup-button" >회원가입</a>
        </div>
      </div>

      </form>
    </main>

    <!-- footer -->
    <%- include('include/footer', { title: 'test' })%>
  </body>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const loginButton = document.getElementById('login-button');
      const signupButton = document.getElementById('signup-button');

      loginButton.addEventListener('click', login);

      signupButton.addEventListener('click', () => {
        window.location.href = '/member/signup';
      });
    });

    // 로그인 처리
    async function login(e) {
      e.preventDefault();

      const form = document.forms['loginForm'];
      const userId = form.id.value.trim();
      const password = form.pw.value.trim();

      // 에러 메시지 영역 초기화
      const errorMsg = document.getElementById('error');
      errorMsg.style.display = 'none'; //초기화 시 숨김
      errorMsg.innerText = '';
      
      // 유효성 검사
      // (todo) 유효성 검사 추가: 이메일 형식/ 영문,숫자,특수문자 포함 8자 이상
      if (!userId || !password) {
        errorMsg.innerText =
          '이메일과 비밀번호를 모두 입력해주세요 🥹';
          errorMsg.style.display = 'block'; 
        return;
      }

      // 서버로 데이터 전송
      const data = { userId, password };
      console.log('로그인 데이터', data);

      try {
        const res = await axios.post('/auth', data);

        // 로그인 성공
        if (res.status === 200 && res.data.isLogin) {
          alert(`${res.data.nickname}님, 환영합니다!`);
          window.location.href = res.data.redirectUrl || '/';
        }
      } catch (err) {
        // 상태 코드 기반 fe 메시지 처리
        if (err.response) {
          const { status, data } = err.response;

          if (status === 401) {
            // 비밀번호 불일치 또는 회원 정보 없음
            errorMsg.textContent = data.message || '로그인에 실패했습니다.';
          } else if (status === 404) {
            // 회원 정보 없음
            errorMsg.textContent = '회원 정보를 찾을 수 없습니다. 회원가입을 진행해주세요.';
          } else if (status === 500) {
            // 서버 오류
            errorMsg.textContent = '서버 내부 오류가 발생했습니다. 잠시 후 다시 시도해주세요.';
          } else {
            // 기타 예외
            errorMsg.textContent = '알 수 없는 오류가 발생했습니다.';
          }
        } else {
          // 네트워크 오류
          console.error('네트워크 오류 발생:', err);
          errorMsg.textContent = '네트워크 오류가 발생했습니다. 다시 시도해주세요.';
        }

        errorMsg.style.display='block'
      }
    }

    // 비밀번호 보기/숨기기
    document.getElementById('toggleBtn').addEventListener('click', ()=>{
      const pw = document.getElementById('password')
      const toggleBtn = document.getElementById('toggleBtn')
      
      if(pw.type === 'password'){
        pw.setAttribute('type', 'text')
        toggleBtn.classList.add('show')
      }else{
        pw.setAttribute('type', 'password')
        toggleBtn.classList.remove('show')
      }
    })
  </script>
</html>